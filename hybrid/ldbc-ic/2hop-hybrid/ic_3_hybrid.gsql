use graph ldbc_snb
drop query ic_3_hybrid
CREATE QUERY ic_3_hybrid(vertex<Person> pid, string x, string y,
    datetime startDate, int duration, list<float> q) FOR GRAPH ldbc_snb SYNTAX v2 {
  SetAccum<vertex> @xSet, @ySet;
  SetAccum<vertex> @@MessageSet;
  SumAccum<int> @xCount, @yCount, @totalCount;
  S = { pid };
  S =
    SELECT p
    FROM S:s -(KNOWS*1..2)- Person:p,
         :p -(<HAS_CREATOR)- (Post|Comment):m1 -(MESG_LOCATED_IN>)- Country:c1,
         :p -(<HAS_CREATOR)- (Post|Comment):m2 -(MESG_LOCATED_IN>)- Country:c2,
         :p -(IS_LOCATED_IN>.IS_PART_OF>)- Country:c3
    WHERE p != s
         and c1.name == x and c2.name == y
         and (c3.name != x and c3.name != y)
         and m1.creationDate >= datetime_to_epoch(startDate) * 1000
         and m2.creationDate >= datetime_to_epoch(startDate) * 1000
         and m1.creationDate < datetime_to_epoch(datetime_add(startDate, INTERVAL duration DAY)) * 1000
         and m2.creationDate < datetime_to_epoch(datetime_add(startDate, INTERVAL duration DAY)) * 1000
    ACCUM
         p.@xSet += m1,
         p.@ySet += m2,
         @@MessageSet += m1,
         @@MessageSet += m2
    POST-ACCUM
         p.@xCount = p.@xSet.size(), p.@xSet.clear(),
         p.@yCount = p.@ySet.size(), p.@ySet.clear(),
         p.@totalCount = p.@xCount + p.@yCount
    ORDER BY p.@xCount DESC, p.id ASC
    LIMIT 20;

  MSet = @@MessageSet;


  M = TopKVectorSearch({Comment.content_embedding, Post.content_embedding}, q, 10, filter=MSet, ef=50);

  PRINT S[
    S.id AS personId,
    S.firstName AS personFirstName,
    S.lastName AS personLastName,
    S.@xCount AS xCount,
    S.@yCount AS yCount,
    S.@totalCount AS totalCount
  ];

  PRINT MSet.size();

  PRINT M[
     M.id AS messageId,
     M.content AS messageContent
  ];


}

install query -single ic_3_hybrid